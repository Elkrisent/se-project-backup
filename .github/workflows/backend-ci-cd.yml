# ==================================================
# FILE: .github/workflows/backend-ci-cd.yml
# Backend CI/CD Pipeline - Runs tests and deploys
# ==================================================
name: Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'backend/**'

jobs:
  test:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: fundraising_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run linter
        working-directory: ./backend
        run: npm run lint || echo "No lint script found"

      - name: Run tests
        working-directory: ./backend
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/fundraising_test
          JWT_SECRET: test_jwt_secret_key_12345
        run: npm test

      - name: Generate coverage report
        working-directory: ./backend
        run: npm run test:coverage || echo "No coverage script"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./backend/coverage/lcov.info
          flags: backend

  deploy:
    name: Deploy Backend
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway/Render
        run: |
          echo "ðŸš€ Deploying backend to production..."
          # Railway deployment (if using Railway CLI)
          # npm install -g @railway/cli
          # railway up --service backend
          
          # OR use Railway GitHub integration (recommended)
          echo "Using Railway GitHub integration for deployment"
          
      - name: Notify deployment status
        if: always()
        run: |
          echo "Backend deployment completed"
          # Add Slack/Discord notification here if needed

# ==================================================
# FILE: .github/workflows/frontend-ci-cd.yml
# Frontend CI/CD Pipeline - Builds and deploys to Vercel
# ==================================================
---
name: Frontend CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'frontend/**'

jobs:
  test:
    name: Test Frontend
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run linter
        working-directory: ./frontend
        run: npm run lint || echo "No lint script found"

      - name: Type check (if TypeScript)
        working-directory: ./frontend
        run: npm run type-check || echo "Not using TypeScript"

      - name: Run tests
        working-directory: ./frontend
        run: npm test || echo "No tests configured yet"

      - name: Build frontend
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
        run: npm run build

      - name: Check build size
        working-directory: ./frontend
        run: |
          echo "Build completed successfully"
          du -sh dist/

  deploy:
    name: Deploy Frontend to Vercel
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'

      - name: Comment PR with deployment URL
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Frontend deployed successfully!'
            })

# ==================================================
# FILE: .github/workflows/deploy.yml
# Full Stack Deployment Pipeline
# ==================================================
---
name: Full Stack Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run database migrations
        working-directory: ./backend
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          echo "Running database migrations..."
          # npm run migrate || echo "No migration script"

      - name: Deploy backend
        run: |
          echo "Deploying backend to Railway/Render..."
          # Deployment handled by Railway GitHub integration

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        env:
          VITE_API_BASE_URL: ${{ secrets.VITE_API_BASE_URL }}
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'

  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    if: always()
    
    steps:
      - name: Send deployment notification
        run: |
          echo "ðŸŽ‰ Full stack deployment completed!"
          echo "Backend: Deployed"
          echo "Frontend: Deployed"
          # Add Slack/Discord/Email notification here

# ==================================================
# FILE: .github/workflows/pr-checks.yml
# Pull Request Quality Checks
# ==================================================
---
name: PR Quality Checks

on:
  pull_request:
    branches: [main, develop]

jobs:
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Check commit messages
        run: |
          echo "Checking commit messages..."
          # Add commitlint check here

      - name: Check for merge conflicts
        run: |
          git diff --check

      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment PR checklist
        uses: actions/github-script@v7
        with:
          script: |
            const checklist = `
            ## PR Checklist
            - [ ] Code follows project style guidelines
            - [ ] Tests added/updated for new features
            - [ ] Documentation updated
            - [ ] No breaking changes
            - [ ] All CI checks passing
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: checklist
            })

# ==================================================
# SECRETS REQUIRED (Add these to GitHub Secrets):
# ==================================================
# Backend:
# - DATABASE_URL: PostgreSQL connection string
# - JWT_SECRET: Secret key for JWT tokens
#
# Frontend (Vercel):
# - VERCEL_TOKEN: Vercel API token
# - VERCEL_ORG_ID: Vercel organization ID
# - VERCEL_PROJECT_ID: Vercel project ID
# - VITE_API_BASE_URL: Backend API URL
#
# Optional:
# - SLACK_WEBHOOK_URL: For deployment notifications
# - CODECOV_TOKEN: For code coverage reports
